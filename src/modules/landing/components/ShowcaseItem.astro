---
import { LinkIcon, XIcon } from "@lucide/astro";
import { Image } from "astro:assets";

import WavyUnderlineDarkBg from "../../../assets/images/common/wavy-underline-darkbg.svg";

const {
  key,
  title,
  associated_with,
  description_short,
  description,
  images_portrait,
  images_landscape,
  links,
} = Astro.props;
---

<li class="carousel-item">
  <dialog id=`my_modal_${key}` class="modal modal-bottom">
    <div class="modal-backdrop bg-primary/50"></div>

    <div
      class="modal-box mx-auto flex min-h-11/12 max-w-4xl flex-col gap-4 overflow-scroll bg-primary text-primary-content"
    >
      <form method="dialog">
        <button class="btn absolute top-5 right-5 btn-circle btn-ghost">
          <XIcon />
        </button>
      </form>

      <div class="flex flex-col">
        <h3 class="font-heading text-5xl">{title}</h3>

        <Image
          src={WavyUnderlineDarkBg}
          alt="underline for the heading"
          width={120}
          height={20}
          densities={[1, 2]}
        />
      </div>

      <p class="text-xl">{description}</p>

      <div class="flex w-full flex-row gap-1.5">
        {
          links.map((link: { label: string; url: string }) => (
            <a href={link.url} class="btn w-fit btn-soft btn-sm">
              <LinkIcon size={14} /> {link.label}
            </a>
          ))
        }
      </div>

      <div
        class="carousel min-h-[400px] w-full carousel-center space-x-4 rounded-box bg-neutral"
      >
        {
          images_landscape.map((image: string, index: number) => (
            <div class="carousel-item">
              <Image
                src={image}
                alt="underline for the heading"
                width={600}
                height={400}
                densities={[1, 2]}
                class="hidden rounded-box md:block"
              />

              <Image
                src={images_portrait[index]}
                alt="underline for the heading"
                width={300}
                height={400}
                densities={[1, 2]}
                class="block rounded-box md:hidden"
              />
            </div>
          ))
        }
      </div>

      {
        associated_with && (
          <span class="font-body text-lg text-primary-content/60">
            @ {associated_with}
          </span>
        )
      }
    </div>
  </dialog>

  <div
    class="showcase-item-card card-border card h-72 w-64 border-primary/40 bg-base-200"
  >
    <div class="card-body">
      <h2 class="card-title text-2xl">{title}</h2>

      <p class="text-lg">
        {description_short}
      </p>

      <div class="card-actions justify-end">
        <button
          data-key={key}
          class="showcase-item-card-button btn btn-outline btn-sm"
        >
          View Details
        </button>
      </div>
    </div>
  </div>
</li>

<script>
  import { hover, animate, press } from "motion";

  import { getCSSVariable, isTouchDevice } from "../../common/utils";

  const showcaseItem = document.querySelectorAll(
    ".showcase-item-card",
  ) as NodeListOf<HTMLDivElement>;

  if (showcaseItem) {
    hover(showcaseItem, (element) => {
      animate(element, {
        width: "280px",
        height: "300px",
        backgroundColor: getCSSVariable("--color-primary"),
        color: getCSSVariable("--color-primary-content"),
      });

      return () => {
        animate(element, {
          width: "256px",
          height: "288px",
          backgroundColor: getCSSVariable("--color-base-200"),
          color: getCSSVariable("--color-base-content"),
        });
      };
    });

    if (isTouchDevice()) {
      press(showcaseItem, (element) => {
        animate(element, {
          width: "280px",
          height: "300px",
          backgroundColor: getCSSVariable("--color-primary"),
          color: getCSSVariable("--color-primary-content"),
        });

        return () => {
          animate(element, {
            width: "256px",
            height: "288px",
            backgroundColor: getCSSVariable("--color-base-200"),
            color: getCSSVariable("--color-base-content"),
          });
        };
      });
    }
  }

  const showcaseItemButton = document.querySelectorAll(
    ".showcase-item-card-button",
  ) as NodeListOf<HTMLButtonElement>;

  if (showcaseItemButton) {
    showcaseItemButton.forEach((button) => {
      button.addEventListener("click", () => {
        const modal = document.getElementById(
          `my_modal_${button.dataset.key}`,
        ) as HTMLDialogElement;

        modal.showModal();
      });
    });
  }
</script>
